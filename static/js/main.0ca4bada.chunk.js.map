{"version":3,"sources":["components/Buttons.js","components/CardTitle.js","components/CountryCard.js","components/GlobalStats.js","components/MapColor.js","components/MapCircles.js","components/Map.js","components/Search.js","components/Chart.js","App.js","index.js"],"names":["Buttons","activeButton","onIndexChange","onButtonChange","setHoveredCountry","useStyles","makeStyles","theme","root","textAlign","margin","spacing","sizeSmall","padding","fontSize","typography","pxToRem","delay","ms","Promise","res","setTimeout","resetIndex","string","a","classes","className","Button","color","variant","onClick","CardTitle","border","boxShadow","title","body","icon","Card","CardActionArea","CardContent","Typography","align","LocationOnRounded","CountryCard","hoveredCountry","media","width","country","fontWeight","details","number","name","flag","info","results","num","Math","round","toLocaleString","toString","index","CardMedia","component","alt","image","GlobalStats","activeIndex","activeTitle","activeNumber","globalCases","globalDeaths","MapColor","countryResults","setMouseHover","getCaseColor","value","getCountryIndex","i","length","iso3","countryHover","layer","on","mouseover","event","id","target","feature","properties","ISO_A3","GeoJSON","data","countries","onEachFeature","style","cases","getStyle","options","fillColor","fillOpacity","weight","MapCircles","totalCases","multiplier","totalDeaths","getRadius","sqrt","map","Circle","center","lat","long","radius","MapComponent","activeCountry","setActiveCountry","useMap","useEffect","_zoom","getIndex","coordinates","flyTo","duration","Map","zoom","MapContainer","height","background","maxZoom","minZoom","maxBounds","maxBoundsViscosity","dragging","option","minHeight","display","justifyContent","alignItems","cursor","paddingTop","boxSizing","outline","WebkitTapHighlightColor","paddingBottom","paddingLeft","paddingRight","Dropdown","onCountrySubmit","setChartCountry","countryLabel","Autocomplete","size","autoHighlight","renderInput","params","TextField","label","onChange","onInputChange","inputValue","Chart","chartCountry","dataIndex","useState","setResults","legend","elements","point","maintainAspectRatio","aspectRatio","scales","xAxes","type","format","gridLines","yAxes","ticks","min","userCallback","values","split","join","text","tooltips","callbacks","tooltipItem","datasets","y","console","log","includes","axios","get","date","chartData","timeline","prevDataPoint","newDataPoint","x","push","searchInfo","backgroundColor","borderColor","borderWidth","App","setCountryResults","setActiveIndex","setActiveButton","deaths","searchCountry","countryInfo","casesPerOneMillion","deathsPerOneMillion","container","item","flexBasis","stats","position","bottom","left","zIndex","buttons","chart","createMuiTheme","palette","primary","main","secondary","ReactDOM","render","ThemeProvider","document","querySelector"],"mappings":"8NAiFeA,EA9EC,SAAC,GAAwE,IAAtEC,EAAqE,EAArEA,aAAcC,EAAuD,EAAvDA,cAAeC,EAAwC,EAAxCA,eAAgBC,EAAwB,EAAxBA,kBAEtDC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFC,UAAW,SACX,OAAQ,CACJC,OAAQH,EAAMI,QAAQ,KAG9BC,UAAW,CACPC,QAAS,UACTC,SAAUP,EAAMQ,WAAWC,QAAQ,WAIrCC,EAAQ,SAAAC,GAAE,OAAI,IAAIC,SAAQ,SAAAC,GAAG,OAAIC,WAAWD,EAAKF,OAEjDI,EAAU,uCAAG,WAAOC,GAAP,SAAAC,EAAA,6DACfpB,EAAkB,MAClBD,EAAe,MAFA,SAGTc,EAAM,GAHG,OAIfd,EAAeoB,GAJA,2CAAH,sDAOVE,EAAUpB,IAEhB,OACI,sBAAKqB,UAAWD,EAAQjB,KAAxB,UACI,cAACmB,EAAA,EAAD,CACIC,MAAM,UACNC,QAA0B,UAAjB5B,EAA2B,YAAc,WAClDyB,UAAWD,EAAQb,UACnBkB,QAAS,WACL5B,EAAc,eACdC,EAAe,MACfmB,EAAW,UAPnB,wBAYA,cAACK,EAAA,EAAD,CACIC,MAAM,UACNC,QAA0B,WAAjB5B,EAA4B,YAAc,WACnDyB,UAAWD,EAAQb,UACnBkB,QAAS,WACL5B,EAAc,gBACdoB,EAAW,WANnB,yBAWA,cAACK,EAAA,EAAD,CACIC,MAAM,UACNC,QAA0B,eAAjB5B,EAAgC,YAAc,WACvDyB,UAAWD,EAAQb,UACnBkB,QAAS,WACL5B,EAAc,eACdoB,EAAW,eANnB,yBAYA,cAACK,EAAA,EAAD,CACIC,MAAM,UACNC,QAA0B,gBAAjB5B,EAAiC,YAAc,WACxDyB,UAAWD,EAAQb,UACnBkB,QAAS,WACL5B,EAAc,gBACdoB,EAAW,gBANnB,8B,6CCpBGS,EA1CG,WAEd,IAoBMN,EApBYnB,YAAW,CACzBE,KAAM,CACFE,OAAQ,GACRsB,OAAQ,OACRC,UAAW,QAEfC,MAAO,CACHpB,SAAU,QACVc,MAAO,WAEXO,KAAM,CACFrB,SAAU,QACVc,MAAO,WAEXQ,KAAM,CACFtB,SAAU,MACVc,MAAO,YAICvB,GAEhB,OACI,cAACgC,EAAA,EAAD,CAAMX,UAAWD,EAAQjB,KAAMqB,QAAQ,WAAvC,SACI,cAACS,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,CAAYd,UAAWD,EAAQS,MAAOO,MAAM,SAA5C,oBAEI,cAACC,EAAA,EAAD,CAAmBhB,UAAWD,EAAQW,KAAMK,MAAM,cAEtD,cAACD,EAAA,EAAD,CAAYd,UAAWD,EAAQU,KAAMM,MAAM,SAA3C,8D,SCiDLE,EAlFK,SAAC,GAAoC,IAAnC1C,EAAkC,EAAlCA,aAAc2C,EAAoB,EAApBA,eA6C1BnB,EAtBYnB,YAAW,CACzBE,KAAM,CACFwB,OAAQ,QAEZa,MAAO,CACHC,MAAO,QAEXC,QAAS,CACLC,WAAY,IACZlC,SAAU,SAEdmC,QAAS,CACLD,WAAY,IACZlC,SAAU,SAEdoC,OAAQ,CACJF,WAAY,IACZlC,SAAU,QACVc,MAAO,YAICvB,GAEhB,GAAuB,OAAnBuC,EAAyB,CAEzB,IAAMO,EAAOP,EAAeO,KACtBC,EAAOR,EAAeS,KAAKD,KAC3BE,EAjDO,SAACC,GACd,GAAIA,EAEA,OADAA,EAAMC,KAAKC,MAAMF,IACNG,iBA8CCC,CAASf,EAAeU,QAAQrD,IAC1C2D,EA1Ce,UAAjB3D,EACO,aACiB,WAAjBA,EACA,cACiB,eAAjBA,EACA,cACiB,gBAAjBA,EACA,eAEA,KAmCX,OACI,cAACoC,EAAA,EAAD,CAAMX,UAAWD,EAAQjB,KAAMqB,QAAQ,WAAvC,SACI,eAACS,EAAA,EAAD,WACI,cAACuB,EAAA,EAAD,CACIC,UAAU,MACVC,IAAG,UAAKZ,EAAL,SACHa,MAAOZ,EACPlB,MAAM,eACNR,UAAWD,EAAQoB,QAEvB,eAACN,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAYZ,MAAM,UAASF,UAAWD,EAAQsB,QAA9C,SACKI,IAEL,eAACX,EAAA,EAAD,CAAYZ,MAAM,UAASF,UAAWD,EAAQwB,QAA9C,UACKW,EADL,MACc,sBAAMlC,UAAWD,EAAQyB,OAAzB,SAAkCI,eAShE,OAAO,MC9BAW,EAhDK,SAAC,GAA8B,IAA5BX,EAA2B,EAA3BA,QAASY,EAAkB,EAAlBA,YAqBtBP,EAAW,SAACJ,GACd,GAAIA,EACA,OAAOA,EAAIG,kBAIbjC,EAzBYnB,YAAW,CACzBE,KAAM,CACFwB,OAAQ,OACRC,UAAW,QAEfkC,YAAa,CACTrD,SAAU,QACVc,MAAO,WAEXM,MAAO,CACHpB,SAAU,QACVc,MAAO,WAEXwC,aAAc,CACVpB,WAAY,IACZpB,MAAO,YAUCvB,GAEhB,OACI,cAACiC,EAAA,EAAD,UACI,cAACD,EAAA,EAAD,CAAMX,UAAWD,EAAQjB,KAAMqB,QAAQ,WAAvC,SACI,eAACU,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,CAAYd,UAA2B,gBAAhBwC,EAAgCzC,EAAQ0C,YAAc1C,EAAQS,MAArF,sBACa,uBAAMR,UAA2B,gBAAhBwC,EAAgCzC,EAAQ2C,aAAe,KAAxE,UACRT,EAASL,EAAQe,aADT,UAGb,eAAC7B,EAAA,EAAD,CAAYd,UAA2B,iBAAhBwC,EAAiCzC,EAAQ0C,YAAc1C,EAAQS,MAAtF,sBACa,uBAAMR,UAA2B,iBAAhBwC,EAAiCzC,EAAQ2C,aAAe,KAAzE,UACRT,EAASL,EAAQgB,cADT,kB,mCC6DlBC,EAlGE,SAAC,GAAqD,IAAnDtE,EAAkD,EAAlDA,aAAcuE,EAAoC,EAApCA,eAAgBC,EAAoB,EAApBA,cAExCC,EAAe,SAACC,GAClB,OAAQA,EAAQ,KAAO,UACfA,EAAQ,KAAO,UACfA,EAAQ,KAAO,UACfA,EAAQ,IAAM,UACdA,EAAQ,EAAI,UAAY,WA0B9BC,EAAkB,SAACJ,EAAgBG,GACrC,IAAK,IAAIE,EAAI,EAAGA,EAAIL,EAAeM,OAAQD,IACvC,GAAIL,EAAeK,GAAGxB,KAAK0B,OAASJ,EAChC,OAAOE,EAGf,OAAO,MAsBLG,EAAe,SAACC,GAClB,OACIA,EAAMC,GAAI,CACNC,UAAW,SAACC,GACR,IAAMC,EAAKD,EAAME,OAAOC,QAAQC,WAAWC,OACrC7B,EAAQgB,EAAgBJ,EAAgBa,GAChC,OAAVzB,GAC6Ba,EAAX,UAAjBxE,GACiB,WAAjBA,GACiB,eAAjBA,GACiB,gBAAjBA,EAH0CuE,EAAeZ,GAI5C,UAOlC,OAA8B,IAA1BY,EAAeM,OAEM,UAAjB7E,GAA6C,WAAjBA,EACrB,cAACyF,EAAA,EAAD,CAASC,KAAMC,EAAWC,cAxCnB,SAAC9C,EAASkC,GAC5B,IAAMI,EAAKtC,EAAQyC,WAAWC,OACxB7B,EAAQgB,EAAgBJ,EAAgBa,GACxCS,EA3BO,SAACtB,EAAgBZ,GAC9B,GAAc,OAAVA,GAAmC,UAAjB3D,EAA0B,CAC5C,IAAM8F,EAAQvB,EAAeZ,GAAON,QAAQrD,GAE5C,OADcyE,EAAaqB,GAExB,OAAc,OAAVnC,GAAmC,WAAjB3D,GAbV0E,EAcDH,EAAeZ,GAAON,QAAQrD,IAbhC,IAAM,UACd0E,EAAQ,IAAM,UACdA,EAAQ,GAAK,UACbA,EAAQ,GAAK,UACbA,EAAQ,EAAI,UAAY,UAcrBD,GAAc,GAnBP,IAACC,EAmCLqB,CAASxB,EAAgBZ,GACvCqB,EAAMgB,QAAQC,UAAYJ,EAC1Bb,EAAMgB,QAAQE,YAAc,EAC5BlB,EAAMgB,QAAQrE,MAAQ,QACtBqD,EAAMgB,QAAQG,OAAS,MACvBpB,EAAaC,MAkCe,eAAjBhF,GAAkD,gBAAjBA,EACjC,cAACyF,EAAA,EAAD,CAASC,KAAMC,EAAWC,cAhCd,SAAC9C,EAASkC,GACjCA,EAAMgB,QAAQE,YAAc,EAC5BlB,EAAMgB,QAAQC,UAAY,UAC1BjB,EAAMgB,QAAQrE,MAAQ,QACtBqD,EAAMgB,QAAQG,OAAS,MACvBpB,EAAaC,MA8BF,KAIJ,M,SCrDAoB,EAxCI,SAAC,GAAsC,IAApCpG,EAAmC,EAAnCA,aAAcuE,EAAqB,EAArBA,eAEhC,GAAqB,eAAjBvE,GAAkD,gBAAjBA,EAAgC,CAEjE,IAAM2D,EAAQ,CACV0C,WAAY,CACR1E,MAAO,UACP2E,WAAY,KAEhBC,YAAa,CACT5E,MAAO,UACP2E,WAAY,OAIdE,EAAY,SAAC1D,GAEf,OADYS,KAAKkD,KAAK3D,EAAQO,QAAQrD,IACzB2D,EAAM3D,GAAcsG,YAerC,OAZa/B,EAAemC,KAAI,SAAC5D,GAAD,OAC5B,cAAC6D,EAAA,EAAD,CACIC,OAAQ,CAAC9D,EAAQM,KAAKyD,IAAK/D,EAAQM,KAAK0D,MACxCnF,MAAOgC,EAAM3D,GAAc2B,MAC3BwE,OAAQ,IACRF,UAAWtC,EAAM3D,GAAc2B,MAC/BuE,YAAa,GACba,OAAQP,EAAU1D,IACbA,EAAQI,SAQrB,OAAO,MCjCT8D,G,OAAe,SAAC,GAAyD,IAAvDC,EAAsD,EAAtDA,cAAe1C,EAAuC,EAAvCA,eAAgB2C,EAAuB,EAAvBA,iBAE7CR,EAAMS,cASZ,GANAC,qBAAW,WAFE,IAGLV,EAAIW,OACJH,OAIc,OAAlBD,EAAwB,CAExB,IAQMtD,EARW,SAACY,EAAgBG,GAC9B,IAAK,IAAIE,EAAI,EAAGA,EAAIL,EAAeM,OAAQD,IACvC,GAAIL,EAAeK,GAAG1B,OAASwB,EAC3B,OAAOE,EAKL0C,CAAS/C,EAAgB0C,GAEjCM,EAAc,CAAChD,EAAeZ,GAAOP,KAAKyD,IAAKtC,EAAeZ,GAAOP,KAAK0D,MAEhF1F,YAAW,WACPsF,EAAIc,MAAMD,EAvBL,EAuBwB,CACzBE,SAAU,OAEf,GAEP,OAAO,OAyCIC,EAtCH,SAAC,GAAwG,IAAtGC,EAAqG,EAArGA,KAAMf,EAA+F,EAA/FA,OAAQ5G,EAAuF,EAAvFA,aAAcuE,EAAyE,EAAzEA,eAAgB0C,EAAyD,EAAzDA,cAAe9G,EAA0C,EAA1CA,kBAAmB+G,EAAuB,EAAvBA,iBAUzF,OACI,eAACU,EAAA,EAAD,CACI/B,MAAO,CAACgC,OAAO,OAAQhF,MAAM,OAAQiF,WAAW,SAChDH,KAAMA,EACNf,OAAQA,EACRmB,QAAS,EACTC,QAAS,EACTC,UAAW,CAAC,EAAE,IAAK,KAAK,CAAC,GAAI,MAC7BC,mBAAmB,IACnBC,UAAU,EARd,UASI,cAAC,EAAD,CACInI,aAAcA,EACduE,eAAgBA,EAChBC,cArBU,SAAC1B,GACnB,OAAO3C,EAAkB2C,MAsBrB,cAAC,EAAD,CACI9C,aAAcA,EACduE,eAAgBA,IAEpB,cAAC,EAAD,CACI0C,cAAeA,EACf1C,eAAgBA,EAChB2C,iBA1Be,WACvB,OAAOA,EAAiB,a,0BCzC1B9G,EAAYC,YAAW,CAEzB+H,OAAQ,CACJC,UAAW,GACXC,QAAS,OACTC,eAAgB,aAChBC,WAAY,SACZC,OAAQ,UACRC,WAAY,GACZC,UAAW,aACXC,QAAS,KACTC,wBAAyB,cACzBC,cAAe,EACfC,YAAa,GACbC,aAAc,MA8BPC,EA1BE,SAAC,GAA0D,IAAxD1E,EAAuD,EAAvDA,eAAgB2E,EAAuC,EAAvCA,gBAAiBC,EAAsB,EAAtBA,gBAE3CC,EAAe7E,EAAemC,KAAI,SAAA5D,GAAO,OAAKA,EAAQI,QAEtD1B,EAAUpB,IAEhB,OACI,cAACiJ,EAAA,EAAD,CACIjE,GAAG,iBACHkE,KAAK,SACLtD,QAASoD,EACTG,eAAa,EACbC,YAAa,SAACC,GAAD,OAAY,cAACC,EAAA,EAAD,2BAAeD,GAAf,IAAuBE,MAAM,uBAAuB/H,QAAQ,eACrFH,UAAS,UAAOD,EAAQ4G,QACxBwB,SAAU,SAACzE,EAAMT,GACbwE,EAAgBxE,IAEpBmF,cAAe,SAAC1E,EAAM2E,GAClBX,EAAgBW,O,SC0FjBC,EAhID,SAAC,GAAiD,IAA/CxF,EAA8C,EAA9CA,eAAgByF,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,UAAgB,EAE7BC,mBAAS,IAFoB,mBAEpD7G,EAFoD,KAE3C8G,EAF2C,KAIrDf,EAAe7E,EAAemC,KAAI,SAAA5D,GAAO,OAAKA,EAAQI,QAE1C,eAAd+G,EACAA,EAAY,QACS,gBAAdA,IACPA,EAAY,UAGhB,IAAMjE,EAAU,CACZoE,OAAQ,CACJ9B,SAAS,GAEb+B,SAAS,CACLC,MAAO,CACHvD,OAAQ,KAGhBwD,qBAAqB,EACrBC,YAAa,EACbC,OAAQ,CACJC,MAAO,CACH,CACIC,KAAM,OACN1I,MAAO,CACH2I,OAAQ,YAEZC,UAAW,CACPvC,SAAS,KAIrBwC,MAAO,CACH,CACIC,MAAO,CACHC,IAAK,EACLC,aAAc,SAASvG,EAAOf,EAAOuH,GAIjC,OADAxG,GADAA,GADAA,EAAQA,EAAMhB,YACAyH,MAAM,kBACNC,KAAK,OAI3BP,UAAW,CACPvC,SAAS,MAKzBrG,MAAO,CACHqG,SAAS,EACT+C,KAAK,wBAAD,OAA0BpB,EAA1B,eAA0CD,IAGlDsB,SAAU,CACNC,UAAW,CACP5B,MAAO,SAAS6B,EAAa9F,GACzB,IAAIhB,EAAQgB,EAAK+F,SAAS,GAAG/F,KAAK8F,EAAY7H,OAAO+H,EAKrD,OAJAC,QAAQC,IAAIlH,GAGZA,GADAA,GADAA,EAAQA,EAAMhB,YACAyH,MAAM,kBACNC,KAAK,SA2CnC,OApCAhE,qBAAU,YAEsC,IAAxCgC,EAAayC,SAAS7B,GAwBlBA,GAtBY,uCAAG,sCAAAzI,EAAA,+EAEUuK,IAAMC,IAAN,oDAAuD/B,EAAvD,kBAFV,OAKX,IAASgC,KALE,SAEJtG,EAFI,EAEJA,KACHuG,EAAY,GAECvG,EAAKwG,SAASjC,GACvBkC,IACIC,EAAe,CACfC,EAAGL,EACHN,EAAE,GAAD,OAAKhG,EAAKwG,SAASjC,GAAW+B,GAAQG,IAE3CF,EAAUK,KAAKF,IAEnBD,EAAgBzG,EAAKwG,SAASjC,GAAW+B,GAE7C7B,EAAW8B,GAfA,kDAkBXN,QAAQC,IAAR,MACAzB,EAAW,MAnBA,0DAAH,oDAuBZoC,CAAWvC,GAGfG,EAAW,QAGhB,CAACH,EAAcC,IAGF,OAAZ5G,GAAqC,OAAjB2G,EAEhB,cAAC,OAAD,CACItE,KAAM,CACF+F,SAAU,CACN,CACIe,gBAAiB,2BACjBC,YAAa,UACbC,YAAa,IACbhH,KAAMrC,KAIlB2C,QAASA,IAIV,MCgBA2G,EArIH,WAAO,IAAD,EAEgBzC,mBAAS,IAFzB,mBAEP7G,EAFO,KAEE8G,EAFF,OAG8BD,mBAAS,IAHvC,mBAGP3F,EAHO,KAGSqI,EAHT,OAIwB1C,mBAAS,eAJjC,mBAIPjG,EAJO,KAIM4I,EAJN,OAK0B3C,mBAAS,SALnC,mBAKPlK,EALO,KAKO8M,EALP,OAMU5C,mBAAS,GANnB,mBAMPvC,EANO,aAOcuC,mBAAS,CAAC,GAAG,KAP3B,mBAOPtD,EAPO,aAQ4BsD,mBAAS,OARrC,mBAQPjD,EARO,KAQQC,EARR,OAS8BgD,mBAAS,MATvC,mBASPvH,EATO,KASSxC,EATT,OAU0B+J,mBAAS,MAVnC,mBAUPF,EAVO,KAUOb,EAVP,KAYd/B,qBAAU,WAEN,IAAMmF,EAAU,uCAAG,8BAAAhL,EAAA,sEACMuK,IAAMC,IAAI,sCADhB,gBACRrG,EADQ,EACRA,KACPyE,EAAW,CACP/F,YAAasB,EAAKI,MAClBzB,aAAcqB,EAAKqH,SAJR,2CAAH,qDAQVC,EAAa,uCAAG,gCAAAzL,EAAA,sEACGuK,IAAMC,IAAI,4CADb,gBACXrG,EADW,EACXA,KACDC,EAAYD,EAAKgB,KAAI,SAAC5D,GAAD,MAAc,CACrCI,KAAMJ,EAAQA,QACdM,KAAMN,EAAQmK,YACd5J,QAAS,CACLgD,WAAYvD,EAAQgD,MACpBA,MAAOhD,EAAQoK,mBAAqB,GACpC3G,YAAazD,EAAQiK,OACrBA,OAAQjK,EAAQqK,oBAAsB,QAI9CP,EAAkBjH,GAbA,2CAAH,qDAgBnB4G,IACAS,MAED,IAEH,IAmCMxL,EAnCYnB,YAAW,CACzB+M,UAAW,CACP9E,QAAS,QAEb+E,KAAM,CACFC,UAAW,OACX7M,OAAQ,IAEZ8M,MAAO,CACHC,SAAU,WACVC,OAAQ,EACRC,KAAM,EACNC,OAAQ,KAEZC,QAAS,CACLrF,eAAgB,SAChB9H,OAAQ,IAEZqC,QAAS,CACL0K,SAAU,WACV3K,MAAO,SACP4K,OAAQ,MACRC,KAAM,EACNC,OAAQ,KAEZE,MAAO,CACHtF,eAAgB,SAChBV,OAAQ,OACRmB,aAAc,GACdD,YAAa,GACbL,WAAY,IAKJtI,GAEhB,OAEI,sBAAKqB,UAAWD,EAAQ4L,UAAxB,UACI,gCACI,cAAC,EAAD,CACIzF,KAAMA,EACNf,OAAQA,EACR5G,aAAcA,EACduE,eAAgBA,EAChB0C,cAAeA,EACf9G,kBAAmBA,EACnB+G,iBAAkBA,IAEtB,qBAAKzF,UAAWD,EAAQ+L,MAAxB,SACI,cAAC,EAAD,CACIlK,QAASA,EACTY,YAAaA,SAIzB,qBAAKxC,UAAWD,EAAQsB,QAAxB,SACA,cAAC,EAAD,CACI9C,aAAcA,EACd2C,eAAgBA,MAGpB,sBAAKlB,UAAWD,EAAQ6L,KAAxB,UACI,cAAC,EAAD,IACA,cAAC,EAAD,CACIrN,aAAcA,EACdC,cAAe4M,EACf3M,eAAgB4M,EAChB3M,kBAAmBA,IAEvB,cAAC,EAAD,CACIoE,eAAgBA,EAChB2E,gBAAiBhC,EACjBiC,gBAAiBA,IAErB,qBAAK1H,UAAWD,EAAQqM,MAAxB,SACI,cAAC,EAAD,CACI7D,aAAcA,EACdC,UAAWjK,EACXuE,eAAgBA,aCjIlCjE,EAAQwN,YAAe,CACzBC,QAAS,CACLC,QAAS,CACLC,KAAM,WAEVC,UAAW,CACPD,KAAM,cAKlBE,IAASC,OAAO,cAACC,EAAA,EAAD,CAAe/N,MAAOA,EAAtB,SAA6B,cAAC,EAAD,MAAwBgO,SAASC,cAAc,W","file":"static/js/main.0ca4bada.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button, makeStyles } from '@material-ui/core';\r\n\r\nconst Buttons = ({ activeButton, onIndexChange, onButtonChange, setHoveredCountry }) => {\r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        root: {\r\n            textAlign: 'center',\r\n            '& >*': {\r\n                margin: theme.spacing(1),\r\n            },\r\n        },\r\n        sizeSmall: {\r\n            padding: '3px 9px',\r\n            fontSize: theme.typography.pxToRem(11.5),\r\n        },\r\n    }));\r\n\r\n    const delay = ms => new Promise(res => setTimeout(res, ms));\r\n\r\n    const resetIndex = async (string) => {\r\n        setHoveredCountry(null);\r\n        onButtonChange(null);\r\n        await delay(5);\r\n        onButtonChange(string);\r\n    }\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Button \r\n                color='primary' \r\n                variant={activeButton === 'cases' ? 'contained' : 'outlined'} \r\n                className={classes.sizeSmall}\r\n                onClick={() => {\r\n                    onIndexChange('globalCases');\r\n                    onButtonChange(null);\r\n                    resetIndex('cases');\r\n                }}\r\n            >\r\n                Cases/100k\r\n            </Button>\r\n            <Button \r\n                color='primary' \r\n                variant={activeButton === 'deaths' ? 'contained' : 'outlined'} \r\n                className={classes.sizeSmall}\r\n                onClick={() => {\r\n                    onIndexChange('globalDeaths');\r\n                    resetIndex('deaths');\r\n                }}\r\n            >\r\n                Deaths/100k\r\n            </Button>\r\n            <Button \r\n                color='primary' \r\n                variant={activeButton === 'totalCases' ? 'contained' : 'outlined'} \r\n                className={classes.sizeSmall}\r\n                onClick={() => {\r\n                    onIndexChange('globalCases');\r\n                    resetIndex('totalCases');\r\n                    \r\n                }}\r\n            >\r\n                Total Cases\r\n            </Button>\r\n            <Button \r\n                color='primary' \r\n                variant={activeButton === 'totalDeaths' ? 'contained' : 'outlined'} \r\n                className={classes.sizeSmall}\r\n                onClick={() => {\r\n                    onIndexChange('globalDeaths');\r\n                    resetIndex('totalDeaths');\r\n                }}\r\n            >\r\n                Total Deaths\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Buttons;","import React from 'react';\r\nimport { Card, CardActionArea, CardContent, Typography, makeStyles } from '@material-ui/core';\r\nimport { LocationOnRounded } from '@material-ui/icons';\r\n\r\nconst CardTitle = () => {\r\n    \r\n    const useStyles = makeStyles({\r\n        root: {\r\n            margin: 10,\r\n            border: 'none',\r\n            boxShadow: 'none',\r\n        },\r\n        title: {\r\n            fontSize: '3.8vw',\r\n            color: '#145EA7',\r\n        },\r\n        body: {\r\n            fontSize: '1.2vw',\r\n            color: '#73A5C6',\r\n        },\r\n        icon: {\r\n            fontSize: '4vw',\r\n            color: '#145EA7',\r\n        },\r\n    });\r\n    \r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Card className={classes.root} variant='outlined'>\r\n            <CardActionArea>\r\n                <CardContent>\r\n                    <Typography className={classes.title} align='center'>\r\n                        CaseMap\r\n                        <LocationOnRounded className={classes.icon} align='center'/>\r\n                    </Typography>\r\n                    <Typography className={classes.body} align='center'>\r\n                        An Interactive Map for Tracking COVID-19\r\n                    </Typography> \r\n                </CardContent>\r\n            </CardActionArea>\r\n        </Card>\r\n    );\r\n\r\n};\r\n \r\nexport default CardTitle;","import React from 'react';\r\nimport { Card, CardContent, CardActionArea, CardMedia, Typography, makeStyles } from '@material-ui/core';\r\n\r\nconst CountryCard = ({activeButton, hoveredCountry}) => {\r\n\r\n    const toString = (num) => {\r\n        if (num) {\r\n            num = Math.round(num);\r\n            return num.toLocaleString();\r\n        };\r\n    };\r\n    \r\n    const getIndex = () => {\r\n        if (activeButton === 'cases') {\r\n            return 'Cases/100k'\r\n        } else if (activeButton === 'deaths') {\r\n            return 'Deaths/100k'\r\n        } else if (activeButton === 'totalCases') {\r\n            return 'Total Cases'\r\n        } else if (activeButton === 'totalDeaths') {\r\n            return 'Total Deaths'\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    const useStyles = makeStyles({\r\n        root: {\r\n            border: 'none',\r\n        },\r\n        media: {\r\n            width: '100%',\r\n        },\r\n        country: {\r\n            fontWeight: 900,\r\n            fontSize: '1.2vw'\r\n        },\r\n        details: {\r\n            fontWeight: 400,\r\n            fontSize: '0.8vw'\r\n        },\r\n        number: {\r\n            fontWeight: 900,\r\n            fontSize: '0.8vw',\r\n            color: '#CC0101'\r\n        }\r\n    });\r\n\r\n    const classes = useStyles();\r\n\r\n    if (hoveredCountry !== null) {\r\n        \r\n        const name = hoveredCountry.name;\r\n        const flag = hoveredCountry.info.flag;\r\n        const results = toString(hoveredCountry.results[activeButton]);\r\n        const index = getIndex();\r\n\r\n        return (\r\n            <Card className={classes.root} variant='outlined'>\r\n                <CardActionArea>\r\n                    <CardMedia\r\n                        component='img'\r\n                        alt={`${name} Flag`}\r\n                        image={flag}\r\n                        title='Country Flag'\r\n                        className={classes.media}\r\n                    />\r\n                    <CardContent>\r\n                        <Typography color='primary'className={classes.country}>\r\n                            {name}\r\n                        </Typography>\r\n                        <Typography color='primary'className={classes.details}>\r\n                            {index} | <span className={classes.number}>{results}</span>\r\n                        </Typography>\r\n                    </CardContent>\r\n                </CardActionArea>\r\n            </Card>\r\n        );\r\n\r\n    } else {\r\n\r\n        return null;\r\n    }\r\n}\r\n\r\nexport default CountryCard;\r\n\r\n","import React from 'react';\r\nimport { Card, CardContent, Typography, makeStyles, CardActionArea } from '@material-ui/core';\r\n\r\nconst GlobalStats = ({ results, activeIndex }) => {\r\n\r\n    const useStyles = makeStyles({\r\n        root: {\r\n            border: 'none',\r\n            boxShadow: 'none'\r\n        },\r\n        activeTitle: {\r\n            fontSize: '1.6vw',\r\n            color: '#20639B',\r\n        },\r\n        title: {\r\n            fontSize: '0.8vw',\r\n            color: '#73A5C6',\r\n        },\r\n        activeNumber: {\r\n            fontWeight: 900,\r\n            color: '#CC0101'\r\n        }\r\n    });\r\n\r\n    const toString = (num) => {\r\n        if (num) {\r\n            return num.toLocaleString();\r\n        };\r\n    };\r\n    \r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <CardActionArea>\r\n            <Card className={classes.root} variant='outlined'>\r\n                <CardContent>\r\n                    <Typography className={activeIndex === 'globalCases' ? classes.activeTitle : classes.title}>\r\n                        Cases |  <span className={activeIndex === 'globalCases' ? classes.activeNumber : null}> \r\n                        {toString(results.globalCases)} </span>\r\n                    </Typography>\r\n                    <Typography className={activeIndex === 'globalDeaths' ? classes.activeTitle : classes.title}>\r\n                        Deaths | <span className={activeIndex === 'globalDeaths' ? classes.activeNumber : null}> \r\n                        {toString(results.globalDeaths)} </span>\r\n                    </Typography> \r\n                </CardContent>\r\n            </Card>\r\n        </CardActionArea>\r\n    );\r\n\r\n};\r\n \r\nexport default GlobalStats;","import React from 'react';\r\nimport countries from '../data/world.json'\r\nimport { GeoJSON } from 'react-leaflet';\r\n\r\nconst MapColor = ({ activeButton, countryResults, setMouseHover }) => {\r\n\r\n    const getCaseColor = (value) => {\r\n        return  value > 9235 ? '#670101' :\r\n                value > 5427 ? '#A50101' :\r\n                value > 2615 ? '#E01D0F' :\r\n                value > 856 ? '#FF5035' :\r\n                value > 0 ? '#FF805D' : '#E3E3E3';\r\n    };\r\n\r\n    const getDeathColor = (value) => {\r\n        return  value > 168 ? '#862501' :\r\n                value > 117 ? '#AE4201' :\r\n                value > 69 ? '#D75F01' :\r\n                value > 26 ? '#FF7F04' : \r\n                value > 0 ? '#FFA132' : '#E3E3E3';\r\n    };\r\n    \r\n    const getStyle = (countryResults, index) => {\r\n        if (index !== null && activeButton === 'cases') {\r\n            const cases = countryResults[index].results[activeButton];\r\n            const style = getCaseColor(cases);\r\n            return style;\r\n        } else if (index !== null && activeButton === 'deaths') {\r\n            const cases = countryResults[index].results[activeButton];\r\n            const style = getDeathColor(cases);\r\n            return style;\r\n        }\r\n        else {\r\n            return getCaseColor(-1);\r\n        }\r\n    };\r\n\r\n    const getCountryIndex = (countryResults, value) => {\r\n        for (var i = 0; i < countryResults.length; i++) {\r\n            if (countryResults[i].info.iso3 === value) {\r\n                return i;\r\n            }\r\n        };\r\n        return null;\r\n    };\r\n\r\n    const onEachCountry = (country, layer) => {\r\n        const id = country.properties.ISO_A3;\r\n        const index = getCountryIndex(countryResults, id)\r\n        const style = getStyle(countryResults, index);\r\n        layer.options.fillColor = style;\r\n        layer.options.fillOpacity = 1;\r\n        layer.options.color = 'white';\r\n        layer.options.weight = '0.8'\r\n        countryHover(layer);\r\n    };\r\n\r\n    const onEachCountryTotal = (country, layer) => {\r\n        layer.options.fillOpacity = 1;\r\n        layer.options.fillColor = '#E3E3E3';\r\n        layer.options.color = 'white';\r\n        layer.options.weight = '0.8'\r\n        countryHover(layer);\r\n    };\r\n\r\n    const countryHover = (layer) => {\r\n        return (\r\n            layer.on ({\r\n                mouseover: (event) => {\r\n                    const id = event.target.feature.properties.ISO_A3;\r\n                    const index = getCountryIndex(countryResults, id);\r\n                    if (index !== null) {\r\n                        (activeButton === 'cases') ? setMouseHover(countryResults[index]) :\r\n                        (activeButton === 'deaths') ? setMouseHover(countryResults[index]) :\r\n                        (activeButton === 'totalCases') ? setMouseHover(countryResults[index]) :\r\n                        (activeButton === 'totalDeaths') ? setMouseHover(countryResults[index]) :\r\n                        setMouseHover(null);\r\n                    }\r\n                } \r\n            },\r\n        ));\r\n    };\r\n\r\n    if (countryResults.length !== 0) {\r\n\r\n        if (activeButton === 'cases' || activeButton === 'deaths') {\r\n            return <GeoJSON data={countries} onEachFeature={onEachCountry}/>;\r\n\r\n        } else if (activeButton === 'totalCases' || activeButton === 'totalDeaths') {\r\n            return <GeoJSON data={countries} onEachFeature={onEachCountryTotal}/>;\r\n        \r\n        } else {\r\n            return null\r\n        }\r\n\r\n    } else {\r\n        return null;\r\n    }\r\n\r\n};\r\n\r\n\r\nexport default MapColor;","import React from 'react';\r\nimport { Circle } from 'react-leaflet';\r\n\r\nconst MapCircles = ({ activeButton, countryResults }) => {\r\n    \r\n    if (activeButton === 'totalCases' || activeButton === 'totalDeaths') {\r\n\r\n        const index = {\r\n            totalCases: {\r\n                color: '#E01D0F',\r\n                multiplier: 200\r\n            },\r\n            totalDeaths: {\r\n                color: '#FF7F04',\r\n                multiplier: 1250\r\n            }\r\n        };\r\n\r\n        const getRadius = (country) => {\r\n            const num = Math.sqrt(country.results[activeButton]);\r\n            return num * index[activeButton].multiplier;\r\n        };\r\n\r\n        const data = countryResults.map((country) => (\r\n            <Circle\r\n                center={[country.info.lat, country.info.long]}\r\n                color={index[activeButton].color}\r\n                weight={0.95}\r\n                fillColor={index[activeButton].color}\r\n                fillOpacity={0.3}\r\n                radius={getRadius(country)}\r\n                key={country.name}\r\n            />\r\n        ));\r\n\r\n        return data;\r\n        \r\n\r\n    } else {\r\n        return null;\r\n    }\r\n};\r\n\r\nexport default MapCircles;","import React, { useEffect } from 'react';\r\nimport { MapContainer, useMap } from 'react-leaflet';\r\nimport MapColor from './MapColor';\r\nimport MapCircles from './MapCircles';\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\nconst MapComponent = ({ activeCountry, countryResults, setActiveCountry }) => {\r\n\r\n    const map = useMap();\r\n    const zoom = 6;\r\n\r\n    useEffect (() => {\r\n        if (map._zoom !== zoom) {\r\n            setActiveCountry();\r\n        }\r\n    });\r\n\r\n    if (activeCountry !== null) {\r\n\r\n        const getIndex = (countryResults, value) => {\r\n            for (var i = 0; i < countryResults.length; i++) {\r\n                if (countryResults[i].name === value) {\r\n                    return i;\r\n                }\r\n            };\r\n        }\r\n\r\n        const index = getIndex(countryResults, activeCountry);\r\n\r\n        const coordinates = [countryResults[index].info.lat, countryResults[index].info.long]\r\n\r\n        setTimeout(() => {\r\n            map.flyTo(coordinates, zoom, {\r\n                duration: 0.5\r\n            });\r\n        }, 1);   \r\n    }\r\n    return null;\r\n};\r\n\r\nconst Map = ({ zoom, center, activeButton, countryResults, activeCountry, setHoveredCountry, setActiveCountry }) => {\r\n\r\n    const setMouseHover = (country) => {\r\n        return setHoveredCountry(country);\r\n    };\r\n\r\n    const clearActiveCountry = () => {\r\n        return setActiveCountry(null);\r\n    }\r\n\r\n    return (\r\n        <MapContainer \r\n            style={{height:'96vh', width:'66vw', background:'white'}} \r\n            zoom={zoom} \r\n            center={center} \r\n            maxZoom={4} \r\n            minZoom={2} \r\n            maxBounds={[[-60, -170],[90, 180]]} \r\n            maxBoundsViscosity='1'\r\n            dragging={false}> \r\n            <MapColor \r\n                activeButton={activeButton} \r\n                countryResults={countryResults}\r\n                setMouseHover={setMouseHover}\r\n            />\r\n            <MapCircles\r\n                activeButton={activeButton} \r\n                countryResults={countryResults}  \r\n            />\r\n            <MapComponent \r\n                activeCountry={activeCountry}\r\n                countryResults={countryResults}\r\n                setActiveCountry={clearActiveCountry}\r\n            />\r\n        </MapContainer>\r\n    );\r\n};\r\n\r\nexport default Map;","import React from 'react';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n\r\n    option: {\r\n        minHeight: 50,\r\n        display: 'flex',\r\n        justifyContent: 'flex-start',\r\n        alignItems: 'center',\r\n        cursor: 'pointer',\r\n        paddingTop: 20,\r\n        boxSizing: 'border-box',\r\n        outline: '10',\r\n        WebkitTapHighlightColor: 'transparent',\r\n        paddingBottom: 6,\r\n        paddingLeft: 16,\r\n        paddingRight: 16,\r\n    },\r\n});\r\n\r\nconst Dropdown = ({ countryResults, onCountrySubmit, setChartCountry }) => {\r\n\r\n    const countryLabel = countryResults.map(country => (country.name));\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Autocomplete\r\n            id=\"auto-highlight\"\r\n            size=\"medium\"\r\n            options={countryLabel}\r\n            autoHighlight\r\n            renderInput={(params) => <TextField {...params} label=\"Search for a Country\" variant=\"outlined\" />}\r\n            className = {`${classes.option}`}\r\n            onChange={(event,value) => {\r\n                onCountrySubmit(value);\r\n            }}\r\n            onInputChange={(event,inputValue) => {\r\n                setChartCountry(inputValue);\r\n            }}\r\n      />\r\n    );\r\n\r\n};\r\n\r\n\r\nexport default Dropdown;","import React, { useState, useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport axios from 'axios';\r\n\r\nconst Chart = ({ countryResults, chartCountry, dataIndex }) => {\r\n\r\n    const [results, setResults] = useState([]);\r\n\r\n    const countryLabel = countryResults.map(country => (country.name));\r\n\r\n    if (dataIndex === 'totalCases') {\r\n        dataIndex = 'cases';\r\n    } else if (dataIndex === 'totalDeaths') {\r\n        dataIndex = 'deaths';\r\n    }\r\n    \r\n    const options = {\r\n        legend: {\r\n            display: false\r\n        },\r\n        elements:{\r\n            point: {\r\n                radius: 0.5\r\n            }\r\n        },\r\n        maintainAspectRatio: false,\r\n        aspectRatio: 1,\r\n        scales: {\r\n            xAxes: [\r\n                {\r\n                    type: 'time',\r\n                    title: {\r\n                        format: 'MM/DD/YY',\r\n                    },\r\n                    gridLines: {\r\n                        display: false,\r\n                    }\r\n                }\r\n            ],\r\n            yAxes: [\r\n                {\r\n                    ticks: {\r\n                        min: 0,\r\n                        userCallback: function(value, index, values) {\r\n                            value = value.toString();\r\n                            value = value.split(/(?=(?:...)*$)/);\r\n                            value = value.join(',');\r\n                            return value;\r\n                        }       \r\n                    },\r\n                    gridLines: {\r\n                        display: false,\r\n                    }\r\n                }\r\n            ]\r\n        },\r\n        title: {\r\n            display: true,\r\n            text: `Historical daily new ${dataIndex} in ${chartCountry}`\r\n        },\r\n\r\n        tooltips: {\r\n            callbacks: {\r\n                label: function(tooltipItem, data) {\r\n                    var value = data.datasets[0].data[tooltipItem.index].y;\r\n                    console.log(value);\r\n                    value = value.toString();\r\n                    value = value.split(/(?=(?:...)*$)/);\r\n                    value = value.join(',');\r\n                    return value;\r\n                }\r\n            } \r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        if (countryLabel.includes(chartCountry) === true) {\r\n\r\n            const searchInfo = async () => {\r\n                try {\r\n                    const {data} = await axios.get(`https://disease.sh/v3/covid-19/historical/${chartCountry}?lastdays=500`);\r\n                    let chartData = [];\r\n                    let prevDataPoint;\r\n                    for (let date in data.timeline[dataIndex]) {\r\n                        if (prevDataPoint) {\r\n                            let newDataPoint = {\r\n                                x: date,\r\n                                y: `${data.timeline[dataIndex][date] - prevDataPoint}`\r\n                            };\r\n                            chartData.push(newDataPoint);\r\n                        }\r\n                        prevDataPoint = data.timeline[dataIndex][date];\r\n                    }\r\n                    setResults(chartData);\r\n                }\r\n                catch(err) {\r\n                    console.log(err);\r\n                    setResults(null);\r\n                }\r\n            }\r\n            if (chartCountry) {\r\n                searchInfo(chartCountry);\r\n            }\r\n        } else {\r\n            setResults(null);\r\n        }\r\n\r\n    }, [chartCountry, dataIndex]);\r\n\r\n\r\n    if (results !== null && chartCountry !== null) {\r\n        return (\r\n            <Line\r\n                data={{\r\n                    datasets: [\r\n                        {\r\n                            backgroundColor: 'rgba(111, 159, 191, 0.8)',\r\n                            borderColor: '#135BA1',\r\n                            borderWidth: 0.75,\r\n                            data: results,\r\n                        }\r\n                    ]\r\n                }}\r\n                options={options}\r\n            /> \r\n        )\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport default Chart;","import React, {useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport Buttons from './components/Buttons';\r\nimport CardTitle from './components/CardTitle';\r\nimport CountryCard from './components/CountryCard';\r\nimport GlobalStats from './components/GlobalStats';\r\nimport Map from './components/Map';\r\nimport Dropdown from './components/Search';\r\nimport Chart from './components/Chart';\r\n\r\nconst App = () => {\r\n\r\n    const [results, setResults] = useState([]);\r\n    const [countryResults, setCountryResults] = useState([]);\r\n    const [activeIndex, setActiveIndex] = useState('globalCases');\r\n    const [activeButton, setActiveButton] = useState('cases');\r\n    const [zoom, setZoom] = useState(2);\r\n    const [center, setCenter] = useState([42,8]);\r\n    const [activeCountry, setActiveCountry] = useState(null);\r\n    const [hoveredCountry, setHoveredCountry] = useState(null);\r\n    const [chartCountry, setChartCountry] = useState(null);\r\n    \r\n    useEffect(() => {\r\n        \r\n        const searchInfo = async () => {\r\n            const {data} = await axios.get('https://disease.sh/v3/covid-19/all');\r\n            setResults({\r\n                globalCases: data.cases,\r\n                globalDeaths: data.deaths\r\n            });\r\n        }\r\n\r\n        const searchCountry = async () => {\r\n            const {data} = await axios.get('https://disease.sh/v3/covid-19/countries');\r\n            const countries = data.map((country) => ({\r\n                name: country.country,\r\n                info: country.countryInfo,\r\n                results: {\r\n                    totalCases: country.cases,\r\n                    cases: country.casesPerOneMillion / 10,\r\n                    totalDeaths: country.deaths,\r\n                    deaths: country.deathsPerOneMillion / 10\r\n                }\r\n            }));\r\n\r\n            setCountryResults(countries);\r\n        }\r\n        \r\n        searchInfo();\r\n        searchCountry();\r\n\r\n    }, []);\r\n\r\n    const useStyles = makeStyles({\r\n        container: {\r\n            display: 'flex'\r\n        },\r\n        item: {\r\n            flexBasis: '44vw',\r\n            margin: 10\r\n        },\r\n        stats: {\r\n            position: 'absolute',\r\n            bottom: 0,\r\n            left: 8,\r\n            zIndex: 2000\r\n        },\r\n        buttons: {\r\n            justifyContent: 'center',\r\n            margin: 50\r\n        },\r\n        country: {\r\n            position: 'absolute',\r\n            width: '11.2vw',\r\n            bottom: '6vw',\r\n            left: 8,\r\n            zIndex: 1000\r\n        },\r\n        chart: {\r\n            justifyContent: 'center',\r\n            height: '52vh',\r\n            paddingRight: 14,\r\n            paddingLeft: 10,\r\n            paddingTop: 5,\r\n        }\r\n\r\n    });\r\n\r\n    const classes = useStyles();\r\n    \r\n    return (\r\n\r\n        <div className={classes.container}>\r\n            <div>\r\n                <Map \r\n                    zoom={zoom} \r\n                    center={center} \r\n                    activeButton={activeButton}\r\n                    countryResults={countryResults}\r\n                    activeCountry={activeCountry}\r\n                    setHoveredCountry={setHoveredCountry}\r\n                    setActiveCountry={setActiveCountry}\r\n                />\r\n                <div className={classes.stats}>\r\n                    <GlobalStats \r\n                        results={results} \r\n                        activeIndex={activeIndex}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className={classes.country}>\r\n            <CountryCard\r\n                activeButton={activeButton}\r\n                hoveredCountry={hoveredCountry}\r\n            />\r\n            </div>\r\n            <div className={classes.item}>\r\n                <CardTitle/>\r\n                <Buttons \r\n                    activeButton={activeButton} \r\n                    onIndexChange={setActiveIndex} \r\n                    onButtonChange={setActiveButton}\r\n                    setHoveredCountry={setHoveredCountry}\r\n                />\r\n                <Dropdown \r\n                    countryResults={countryResults}\r\n                    onCountrySubmit={setActiveCountry}\r\n                    setChartCountry={setChartCountry}\r\n                />\r\n                <div className={classes.chart}>\r\n                    <Chart\r\n                        chartCountry={chartCountry}\r\n                        dataIndex={activeButton} \r\n                        countryResults={countryResults}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n\r\n};\r\n\r\nexport default App; \r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core';\r\nimport App from './App';\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#135BA1'\r\n        },\r\n        secondary: {\r\n            main: '#6FA2C1'\r\n        }\r\n    }\r\n});\r\n\r\nReactDOM.render(<ThemeProvider theme={theme}><App/></ThemeProvider>, document.querySelector('#root')); "],"sourceRoot":""}